EOF Transport protocols
--------------------------------------------------------------------------------

One of the main aspects: Don't rely on any type of protocol, don't even
implement it: Other did it good and can do it better than me.


~/.ceof/transport-protocols/enabled/<name>/



   get
   send

multiple implementations of one protocol
/usr/share/ceofhack/transport-protocols/tcp/get/sh-nethack
ln to ~/.ceof/transport-protocols/enabled/tcp/get
put options no ~/.ceof/transport-protocols/enabled/tcp/sh-nethack


--------------------------------------------------------------------------------
~/.ceof/transport-protocols/send/<protocol>/

   send

~/.ceof/transport-protocols/listen/<identifier>/


Examples of transport protocols
--------------------------------------------------------------------------------
email mediawiki forum website english text smtp-server dns bittorrent
games irc jabber 

   
Integration of them
--------------------------------------------------------------------------------


This draft describes the communication between ceof and the transport protocols.

Paths

Each transport protocol implementation is located in a directory below
~/.ceof/transport-protocols/available/<name>. At startup ceof will execute the
file "get" in all directories that are found in
~/.ceof/transport-protocols/get/ and "send" in all directories found in
~/.ceof/transport-protocols/send/.

General communication

Ceof writes commands to stdin of the get or send binary, reads stdout of get or
send and forwards stderr as status messages to the client.


Installing a transport protocol

To install a transport protocol, you create a directory below 
~/.ceof/transport-protocols/available/ with the name of your protocol implementation
(for instance "tcp-via-netcat").
If the transport protocol provides the "get"
method (as in getting data from others to us) it must have a binary named "get" in
its directory.
If the transport protocol provides the "send"
method (as in getting sending data to others) it must have a binary named "send" in
its directory.



Enabling a transport protocol (method: get)

A protocol enabled as get listens for incoming messages (also known as
"listener"). To enable a protocol you create a directory below
~/.ceof/transport-protocols/get/ (so called "instance directory"),
with a descriptive name (this name will be used to print error and status
messages to you, so it's your choice how good to name it ;-).
This directory must contain a symlink
named "get" to the protocol implementation below
~/.ceof/transport-protocols/available/ (for instance
~/.ceof/transport-protocols/get/http-80/get could be linked to
~/.ceof/transport-protocols/available/apache-cgi-bin/).
The directory contains all protocol specific parameters.
When ceof enables that get protocol it will change the working directory
to the instance directory (~/.ceof/transport-protocols/get/http-80/) and
execute the "get" binary below the implementation directory
(~/.ceof/transport-protocols/available/apache-cgi-bin/get). This way
the get binary can read all required information from the current working
directory. In future versions ceof may also chroot or jail the get binary to the
instance directory.


Enabling a transport protocol (method: send)

Enabling a transport protocol as a sender works pretty the same way as
above: To enable a protocol as sender you create a directory below
~/.ceof/transport-protocols/send/ with a descriptive name (...).
This directory must contain a symlink named "send" to the protocol implementation
below ~/.ceof/transport-protocols/available/ (for instance
~/.ceof/transport-protocols/send/tcp/send could be linked to
~/.ceof/transport-protocols/available/netcat-tcp/).
The directory contains all protocol specific parameters (this way
you could create ~/.ceof/transport-protocols/send/tcp/ and
~/.ceof/transport-protocols/send/udp/, both containing the symlink
send to ~/.ceof/transport-protocols/available/netcat/, but one containing
the file "udp" and one "tcp", which is read by the netcat protocol
implementation).
When ceof enables that get protocol it will change the working directory
to the instance directory (~/.ceof/transport-protocols/send/tcp/) and
execute the "send" binary below the implementation directory linked
by send (which is ~/.ceof/transport-protocols/send/tcp/send/send and
~/.ceof/transport-protocols/available/netcat/send). This way
the "send" binary can read all required information from the current working
directory. In future versions ceof may also chroot or jail the "send" binary to the
instance directory.



The protocol: ceof2tp

4000: register

This is the first packet send and it follows two ASCII digits describing
the version. This draft sets the version to "00".

The answers from ceof:

5100: registration ok
5200: unsupported version, transport protocol should exit

4001:identify

This is always the second packet send by the transport protocol and it follows

one ASCII digit describing whether it can do get, send or both:
0 = get and send
1 = get only
2 = send only

NN Bytes containing the protocol description.

The answers from ceof:

5101: protocol successfully identified, all methods (send/get) accepted
5201: protocol already existing (get, send or both), not registered. transport protocol must exit.


- got message
   o encrypted!


From ceof to transport protocol:
- send message
   o where to send, without scheme
- quit

Creating a sample transport protocol

Adding transport protocols is a very simple thing which can be done in any
programming language you like. I'm a C and shell coder, so this example
will use the shell script language. First of all I create the base for my
protocol:

mkdir -p ~/.ceof/transport-protocols/available/shell-tcp

The very first thing todo is to register at ceof:

echo 

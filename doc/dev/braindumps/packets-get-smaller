Currently we do not support re-encryption to the next peer, which
would also included two onion shells. If there's for instance
this source route:


   A  -> B  -> [C]  -> D

A is the sender, C is the receiver.
The following happens at A:

- Create noise packet to be dropped for D ("pkgD")
- Create packet for C ("pkgC")
   - Add command "has data" for C
   - Add command "forward to D" for C
   - Add address of D
   - Add message for C
   - Add already created packet pkgD
   - Encrypt packet for C
- Create forward packet for B ("pkgB")
   - Add command forward to C
   - Add address of C
   - Add already created packet pkgC
- Submit pkgB to a transport protocol, which sends it to B

--------------------------------------------------------------------------------

The problem is, that with each host the packet gets smaller.
In practise, peers should re-encrypt the packet and add noise
of the same size of the stripped of content.
To be able to re-encrypt it, we must make sure that each peer
has the public key of the following peer. Thus, we have to
included the public of the next peer in the decrypted packet,
which may look as follows for the example above:

--------------------------------------------------------------------------------

- Create noise packet to be dropped for D ("pkgD")
   No changes needed here
- Create packet for C ("pkgC")
   - Add command "has data" for C
   - Add command "forward to D" for C
   - Add address of D
   - Add size of public key of D
   - Add \n to terminate size
   - Add public key of D
   - Add message for C
   - Add already created packet pkgD
   - Encrypt packet for C
- Create forward packet for B
   - Add command forward to C
   - Add address of C
   - Add size of public key of C
   - Add \n to terminate size
   - Add public key of C
   - Add already created packet pkgC
- Submit pkgB to a transport protocol, which sends it to B

